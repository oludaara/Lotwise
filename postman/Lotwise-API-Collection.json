{
  "info": {
    "name": "Lotwise API - Fractional Real Estate Platform",
    "description": "Complete API testing collection for Lotwise advanced fractional real estate platform with Aave integration",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "userAddress",
      "value": "0x742d35Cc6664C4532123C75F51C69c6CBc12345a",
      "type": "string"
    },
    {
      "key": "propertyId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "tokenId",
      "value": "1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üè† Property Management",
      "item": [
        {
          "name": "Get All Properties",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/properties",
              "host": ["{{baseUrl}}"],
              "path": ["api", "properties"]
            },
            "description": "Retrieve all available properties in the platform"
          },
          "response": []
        },
        {
          "name": "Get Property Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/properties/{{propertyId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "properties", "{{propertyId}}"]
            },
            "description": "Get detailed information about a specific property"
          },
          "response": []
        },
        {
          "name": "Verify Property (Chainlink Functions)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"address\": \"123 Main St, San Francisco, CA\",\n  \"documentHash\": \"0x1234567890abcdef\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/properties/{{propertyId}}/verify",
              "host": ["{{baseUrl}}"],
              "path": ["api", "properties", "{{propertyId}}", "verify"]
            },
            "description": "Verify property details using Chainlink Functions"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üë§ User Management",
      "item": [
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userAddress}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userAddress}}"]
            },
            "description": "Get user profile information"
          },
          "response": []
        },
        {
          "name": "Get User Portfolio",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userAddress}}/portfolio",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userAddress}}", "portfolio"]
            },
            "description": "Get user's complete portfolio including tokens, collateral, and yields"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üè¶ Aave Integration",
      "item": [
        {
          "name": "Get Aave Position",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/aave/position/{{userAddress}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "aave", "position", "{{userAddress}}"]
            },
            "description": "Get user's current Aave position including collateral and borrowings"
          },
          "response": []
        },
        {
          "name": "Supply Tokens as Collateral",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tokenIds\": [1, 2, 3, 4, 5],\n  \"userAddress\": \"{{userAddress}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/aave/supply",
              "host": ["{{baseUrl}}"],
              "path": ["api", "aave", "supply"]
            },
            "description": "Supply property tokens as collateral to Aave"
          },
          "response": []
        },
        {
          "name": "Borrow Against Collateral",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": \"1000\",\n  \"asset\": \"USDC\",\n  \"userAddress\": \"{{userAddress}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/aave/borrow",
              "host": ["{{baseUrl}}"],
              "path": ["api", "aave", "borrow"]
            },
            "description": "Borrow assets against collateralized tokens"
          },
          "response": []
        },
        {
          "name": "Repay Loan",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": \"500\",\n  \"asset\": \"USDC\",\n  \"userAddress\": \"{{userAddress}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/aave/repay",
              "host": ["{{baseUrl}}"],
              "path": ["api", "aave", "repay"]
            },
            "description": "Repay borrowed assets"
          },
          "response": []
        },
        {
          "name": "Withdraw Collateral",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tokenIds\": [1, 2],\n  \"userAddress\": \"{{userAddress}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/aave/withdraw",
              "host": ["{{baseUrl}}"],
              "path": ["api", "aave", "withdraw"]
            },
            "description": "Withdraw collateral tokens from Aave"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üí∞ Yield Management",
      "item": [
        {
          "name": "Get Property Yield Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/yield/{{propertyId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "yield", "{{propertyId}}"]
            },
            "description": "Get yield information for a specific property"
          },
          "response": []
        },
        {
          "name": "Get User Claimable Yield",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/yield/{{propertyId}}/{{userAddress}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "yield", "{{propertyId}}", "{{userAddress}}"]
            },
            "description": "Get claimable yield for a user on a specific property"
          },
          "response": []
        },
        {
          "name": "Claim Yield",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"propertyId\": {{propertyId}},\n  \"userAddress\": \"{{userAddress}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/yield/claim",
              "host": ["{{baseUrl}}"],
              "path": ["api", "yield", "claim"]
            },
            "description": "Claim accumulated yield for a property"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üè™ Marketplace",
      "item": [
        {
          "name": "Get Active Listings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/marketplace",
              "host": ["{{baseUrl}}"],
              "path": ["api", "marketplace"]
            },
            "description": "Get all active token listings in the marketplace"
          },
          "response": []
        },
        {
          "name": "List Token for Sale",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tokenId\": {{tokenId}},\n  \"price\": \"1100\",\n  \"userAddress\": \"{{userAddress}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/marketplace/list",
              "host": ["{{baseUrl}}"],
              "path": ["api", "marketplace", "list"]
            },
            "description": "List a token for sale in the marketplace"
          },
          "response": []
        },
        {
          "name": "Buy Listed Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tokenId\": {{tokenId}},\n  \"buyerAddress\": \"{{userAddress}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/marketplace/buy",
              "host": ["{{baseUrl}}"],
              "path": ["api", "marketplace", "buy"]
            },
            "description": "Purchase a listed token from the marketplace"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üåê Cross-Chain",
      "item": [
        {
          "name": "Get Supported Networks",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/crosschain/supported",
              "host": ["{{baseUrl}}"],
              "path": ["api", "crosschain", "supported"]
            },
            "description": "Get list of supported cross-chain networks"
          },
          "response": []
        },
        {
          "name": "Initiate Cross-Chain Transfer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tokenId\": {{tokenId}},\n  \"destinationChain\": \"polygon\",\n  \"recipientAddress\": \"{{userAddress}}\",\n  \"senderAddress\": \"{{userAddress}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/crosschain/transfer",
              "host": ["{{baseUrl}}"],
              "path": ["api", "crosschain", "transfer"]
            },
            "description": "Initiate cross-chain token transfer using Chainlink CCIP"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìä Analytics & Monitoring",
      "item": [
        {
          "name": "Platform Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/analytics/platform",
              "host": ["{{baseUrl}}"],
              "path": ["api", "analytics", "platform"]
            },
            "description": "Get overall platform statistics"
          },
          "response": []
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check API server health and contract connectivity"
          },
          "response": []
        },
        {
          "name": "Get Price Feeds",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/prices/current",
              "host": ["{{baseUrl}}"],
              "path": ["api", "prices", "current"]
            },
            "description": "Get current ETH/USD and other price feed data"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üß™ Testing & Development",
      "item": [
        {
          "name": "Create Test Property",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"propertyId\": \"TEST-001\",\n  \"value\": \"1000000\",\n  \"metadataURI\": \"ipfs://QmTestProperty\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/test/create-property",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "create-property"]
            },
            "description": "Create a test property for development (dev mode only)"
          },
          "response": []
        },
        {
          "name": "Mint Test Tokens",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"propertyId\": 1,\n  \"userAddress\": \"{{userAddress}}\",\n  \"quantity\": 5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/test/mint-tokens",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "mint-tokens"]
            },
            "description": "Mint test tokens for development (dev mode only)"
          },
          "response": []
        },
        {
          "name": "Reset Test Data",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/reset",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "reset"]
            },
            "description": "Reset all test data (dev mode only)"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-generate test data",
          "if (!pm.environment.get('userAddress')) {",
          "    pm.environment.set('userAddress', '0x742d35Cc6664C4532123C75F51C69c6CBc12345a');",
          "}",
          "",
          "// Log request info",
          "console.log('Making request to:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test scripts",
          "pm.test('Status code is success', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
          "});",
          "",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has JSON content-type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Log response info",
          "console.log('Response status:', pm.response.status);",
          "console.log('Response time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ]
}
